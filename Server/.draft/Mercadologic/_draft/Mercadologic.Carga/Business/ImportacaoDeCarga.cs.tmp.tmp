using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Transactions;
using Processa.Host.Diagnostics;
using Mercadologic.Carga.Domain.Director;
using Mercadologic.Carga.Domain.Mlogic;
using Mercadologic.Carga.Types;
using Mercadologic.Domain;
using Processa.Net;
using Processa.Net.Extensions;
using Processa.Net.Serialization.Json;
using Processa.Sequel;
using Mercadologic.Carga.Domain.Director.mlogic;
using Processa.Net.Collections;

namespace Mercadologic.Carga.Business
{
  class ImportacaoDeCarga
  {
    public Ret BaixarDoDirector(
        string pastaTemporaria
      , int codigoDaEmpresa
      , sp_obter_indice_tabela_carga_publicada.Tabela [] tabelas
      , CancellationToken cancellationToken
      , out string[] arquivos
      )
    {
      arquivos = null;
      try
      {
        var empresa = Domain.Mlogic.empresa.Obter();

        var contagem = 0;
        var downloads =
          from tabela in tabelas
          let entidade = tabela.DFtabela.ChangeCase(TextCase.Underscore)
          select new
          {
            indice = ++contagem,
            tabela,
            entidade,
            caminho = (tabela.DFdestino == null)
              ? null : Path.Combine(pastaTemporaria, $"{entidade}.json"),
          };

        var falha = false;
        var tarefas = downloads.Select(download => Task.Run(() =>
        {
          var indice = download.indice;
          var tabela = download.tabela;
          var entidade = download.entidade;
          var caminho = download.caminho;
          try
          {
            using (var director = new SequelScope(Conexoes.Director))
            {
              Audit.ReportInfo(
                "importar-carga",
                nameof(ImportacaoDeCarga),
                $"Baixando: {tabela.DFtabela}... (tabela {indice}/{tabelas.Length} passo 1/2)"
              );

              // Se o DFdestino for "CONCENTRADOR" os dados serão enviados para o
              // PostgreSQL no formato JSON.
              // Se o DFdestino for null a procedure será executada mas os dados
              // serão ignorados. Neste caso é esperado que a procedure faça a
              // exportação dos dados sozinha.

              if (tabela.DFdestino == null)
              {
                $"exec mlogic.sp_carga_{entidade} @codEmpresa"
                  .AsSql(director)
                  .Set("codEmpresa", empresa.Id)
                  .Execute();
              }
              else
              {
                var registros =
                  $"exec mlogic.sp_carga_{entidade} @codEmpresa"
                    .AsSql(director)
                    .Set("codEmpresa", empresa.Id)
                    .Select();
                using (registros)
                {
                  if (cancellationToken.IsCancellationRequested)
                  {
                    falha = true;
                    return;
                  }
                  SalvarJson(registros, caminho);
                }
              }

              Audit.ReportInfo(
                "importar-carga",
                nameof(ImportacaoDeCarga),
                $"Baixado: {tabela.DFtabela} (tabela {indice}/{tabelas.Length} passo 2/2)"
              );
            }
          }
          catch (Exception ex)
          {
            ex.TraceWarning($"Falha baixando do Director os dados de: {tabela.DFtabela.ChangeCase(TextCase.ProperCase)}");
            Audit.ReportFault(
              "importar-carga",
              nameof(ImportacaoDeCarga),
              ex,
              $"Falha baixando a carga da base do Director."
            );
            falha = true;
          }
        }));

        Task.WaitAll(tarefas.ToArray());

        if (cancellationToken.IsCancellationRequested)
          return Ret.Create(HttpStatusCode.ServiceUnavailable);

        if (falha)
        {
          Audit.ReportSuccess(
            "importar-carga",
            nameof(ImportacaoDeCarga),
            $"Falha. Nem todas as tabelas foram baixadas."
          );
          return Ret.Fail("Falha. Nem todas as tabelas foram baixadas.");
        }

        Audit.ReportSuccess(
          "importar-carga",
          nameof(ImportacaoDeCarga),
          $"Carga recebida do Director."
        );

        arquivos = downloads.Select(x => x.caminho).NonNull().ToArray();
        return true;
      }
      catch (Exception ex)
      {
        Audit.ReportFault(
          "importar-carga",
          nameof(ImportacaoDeCarga),
          ex,
          $"Falha baixando a carga da base do Director."
        );
        return Ret.Fail(ex, "Falha baixando a carga da base do Director.");
      }
    }

    public Ret SalvarNoConcentrador(
        string pastaTemporaria
      , int codigoDaEmpresa
      , string[] arquivosBaixados
      , CancellationToken cancellationToken
      , out Versao versaoDaCarga
      )
    {
      versaoDaCarga = null;
      try
      {
        var empresa = Domain.Mlogic.empresa.Obter();

        var total = arquivosBaixados.Length;
        var count = 0;

        using (var mlogic = new SequelScope(Conexoes.Mercadologic))
        using (var tx = mlogic.CreateTransactionScope())
        {
          foreach (var arquivo in arquivosBaixados)
          {
            if (cancellationToken.IsCancellationRequested)
              return Ret.Create(HttpStatusCode.ServiceUnavailable);

            var tabela = Path.GetFileNameWithoutExtension(arquivo);

            ++count;

            try
            {
              Audit.ReportInfo(
                "importar-carga",
                nameof(ImportacaoDeCarga),
                $"Importando: {tabela}... (tabela {count}/{total} passo 1/2)"
              );

              var entidade = tabela.ChangeCase(TextCase.Underscore);
              var json = File.ReadAllText(arquivo);

              json = json.Replace("'", "''");

              $"select carga_{entidade} ('{json}')"
                .AsSql(mlogic)
                .Execute();

              Audit.ReportInfo(
                "importar-carga",
                nameof(ImportacaoDeCarga),
                $"Importado: {tabela} (tabela {count}/{total} passo 2/2)"
              );
            }
            catch (Exception ex)
            {
              var info = $"Falhou a tentativa de inserir na base do Mercadologic os dados da tabela: {tabela.ChangeCase(TextCase.ProperCase)}";
              Audit.ReportFault("importar-carga", nameof(ImportacaoDeCarga),
                  ex, info);
              return Ret.Fail(ex, info);
            }
          }

          try
          {
            versaoDaCarga = concluir_carga_automatica.Executar();
          }
          catch (Exception ex)
          {
            var info = "Falha executando a procedure: public.concluir_carga_automatica()";
            Audit.ReportFault("importar-carga", nameof(ImportacaoDeCarga),
                ex, info);
            return Ret.Fail(ex, info);
          }

          tx.Complete();
        }

        Audit.ReportSuccess(
          "importar-carga",
          nameof(ImportacaoDeCarga),
          $"Carga importada no Concentrador."
        );

        return true;
      }
      catch (Exception ex)
      {
        Audit.ReportFault(
          "importar-carga",
          nameof(ImportacaoDeCarga),
          ex,
          $"Falha baixando a carga da base do Director."
        );
        return Ret.Fail(ex, "Falha baixando a carga da base do Director.");
      }
    }

    private void SalvarJson(RecordResult registros, string arquivo)
    {
      using (var writer = new StreamWriter(arquivo))
      {
        writer.Write("[");

        var quantidadDeObjetos = 0;
        while (registros.Read())
        {
          if (++quantidadDeObjetos > 1)
          {
            writer.Write(",");
          }

          writer.Write("{");

          var quantidadeDeCampos = 0;
          foreach (var field in registros.Fields)
          {
            if (++quantidadeDeCampos > 1)
            {
              writer.Write(",");
            }

            var nome = registros.GetFieldName(field);

            writer.Write(@"""");
            writer.Write(nome);
            writer.Write(@""":");

            var valor = registros.Current.GetValue(field);

            if (valor == null || valor == DBNull.Value)
            {
              writer.Write("null");
            }
            else if (valor is string || valor is DateTime)
            {
              writer.Write(@"""");
              writer.Write(JsonFormat.Escape(Change.To<string>(valor).Trim()));
              writer.Write(@"""");
            }
            else if (valor is bool bit)
            {
              writer.Write(bit ? "true" : "false");
            }
            else
            {
              writer.Write(Change.To<string>(valor).Trim());
            }
          }
          writer.Write("}");
        }
        writer.Write("]");
        writer.Flush();
      }
    }
  }
}
