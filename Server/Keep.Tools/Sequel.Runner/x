using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Keep.Tools.Reflection;
using Keep.Tools.Sequel;
using Keep.Tools.Sequel.Runner;

namespace Keep.Tools.Sequel.Runner
{
  public static class DbConnectionExtensions
  {
    public static IDisposable SetTransactionIsolationLevelReadUncommitted(
      this DbConnection connection)
    {
      "SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED"
        .AsSql()
        .Execute(connection);

      var disposable = new Disposable();
      disposable.Disposed += (o, e) =>
      {
        "SET TRANSACTION ISOLATION LEVEL READ COMMITTED"
          .AsSql()
          .Execute(connection);
      };

      return disposable;
    }

    public static async Task<IDisposable> SetTransactionIsolationLevelReadUncommittedAsync(
      this DbConnection connection, CancellationToken stopToken)
    {
      await
        "SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED"
          .AsSql()
          .ExecuteAsync(connection, stopToken: stopToken);

      var disposable = new Disposable();
      disposable.Disposed += async (o, e) =>
      {
        await
          "SET TRANSACTION ISOLATION LEVEL READ COMMITTED"
            .AsSql()
            .ExecuteAsync(connection, stopToken: stopToken);
      };

      return disposable;
    }

    public static void SetDefaultOptions(this DbConnection connection)
    {
      SetDefaultOptionsAsync(connection, default).Await();
    }

    public static async Task SetDefaultOptionsAsync(
      this DbConnection connection, CancellationToken stopToken)
    {
      // Há apenas otimizações para SqlServer até o momento.
      if (connection is SqlConnection sqlConnection)
      {
        //
        // Nota sobre 'ARITHABORT ON':
        //
        // A configuração padrão ARITHABORT de SQL Server Management Studio é ON.
        // Os aplicativos cliente que definem ARITHABORT como OFF podem receber planos de
        // consulta diferentes, dificultando a solução de problemas de consultas executadas
        // insatisfatoriamente. Ou seja, a mesma consulta pode ser executada rapidamente no
        // Management Studio, mas lentamente no aplicativo. Ao solucionar problemas de
        // consultas com Management Studio, sempre faça a correspondência com a configuração
        // ARITHABORT do cliente.
        //
        // Referência:
        // -   https://msdn.microsoft.com/pt-br/library/ms190306.aspx
        //

        using var command = connection.CreateCommand();
        command.CommandType = System.Data.CommandType.Text;
        command.CommandText =
          @"set ansi_null_dflt_on on;
            set ansi_nulls on;
            set ansi_padding on;
            set ansi_warnings on;
            set arithabort on;
            set concat_null_yields_null on;
            set cursor_close_on_commit off;
            set deadlock_priority normal;
            set implicit_transactions off;
            set lock_timeout -1;
            set nocount on;
            set query_governor_cost_limit 0;
            set quoted_identifier on;
            set rowcount 0;
            set textsize 2147483647;
            set transaction isolation level read committed;
            ";
        await command.ExecuteNonQueryAsync(stopToken);
      }
    }
  }
}
