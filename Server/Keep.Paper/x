diff --git a/Client/package-lock.json b/Client/package-lock.json
index f360a8c0..1cc50c87 100644
--- a/Client/package-lock.json
+++ b/Client/package-lock.json
@@ -3902,6 +3902,12 @@
         "caller-callsite": "^2.0.0"
       }
     },
+    "callsite": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/callsite/-/callsite-1.0.0.tgz",
+      "integrity": "sha1-KAOY5dZkvXQDi28JBRU+borxvCA=",
+      "dev": true
+    },
     "callsites": {
       "version": "3.1.0",
       "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
@@ -4337,17 +4343,6 @@
       "integrity": "sha1-2jCcwmPfFZlMaIypAheco8fNfH4=",
       "dev": true
     },
-    "clone-deep": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/clone-deep/-/clone-deep-4.0.1.tgz",
-      "integrity": "sha512-neHB9xuzh/wk0dIHweyAXv2aPGZIVk3pLMe+/RNzINf17fe0OG96QroktYAUm7SM1PBnzTabaLboqqxDyMU+SQ==",
-      "dev": true,
-      "requires": {
-        "is-plain-object": "^2.0.4",
-        "kind-of": "^6.0.2",
-        "shallow-clone": "^3.0.0"
-      }
-    },
     "co": {
       "version": "4.6.0",
       "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
@@ -5277,6 +5272,15 @@
         "ms": "2.1.2"
       }
     },
+    "decache": {
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/decache/-/decache-4.6.0.tgz",
+      "integrity": "sha512-PppOuLiz+DFeaUvFXEYZjLxAkKiMYH/do/b/MxpDe/8AgKBi5GhZxridoVIbBq72GDbL36e4p0Ce2jTGUwwU+w==",
+      "dev": true,
+      "requires": {
+        "callsite": "^1.0.0"
+      }
+    },
     "decamelize": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
@@ -7965,6 +7969,12 @@
         }
       }
     },
+    "interpret": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/interpret/-/interpret-1.4.0.tgz",
+      "integrity": "sha512-agE4QfB2Lkp9uICn7BAqoscw4SZP9kTE2hxiFI3jBPmXJfdqiahTbUuKGsMoN2GtqL9AxhYioAcVvgsb1HvRbA==",
+      "dev": true
+    },
     "invariant": {
       "version": "2.2.4",
       "resolved": "https://registry.npmjs.org/invariant/-/invariant-2.2.4.tgz",
@@ -9381,6 +9391,12 @@
       "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
       "dev": true
     },
+    "klona": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/klona/-/klona-2.0.4.tgz",
+      "integrity": "sha512-ZRbnvdg/NxqzC7L9Uyqzf4psi1OM4Cuc+sJAkQPjO6XkQIJTNbfK2Rsmbw8fx1p2mkZdp2FZYo2+LwXYY/uwIA==",
+      "dev": true
+    },
     "launch-editor": {
       "version": "2.2.1",
       "resolved": "https://registry.npmjs.org/launch-editor/-/launch-editor-2.2.1.tgz",
@@ -10297,6 +10313,29 @@
         "boolbase": "~1.0.0"
       }
     },
+    "null-loader": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/null-loader/-/null-loader-3.0.0.tgz",
+      "integrity": "sha512-hf5sNLl8xdRho4UPBOOeoIwT3WhjYcMUQm0zj44EhD6UscMAz72o2udpoDFBgykucdEDGIcd6SXbc/G6zssbzw==",
+      "dev": true,
+      "requires": {
+        "loader-utils": "^1.2.3",
+        "schema-utils": "^1.0.0"
+      },
+      "dependencies": {
+        "schema-utils": {
+          "version": "1.0.0",
+          "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-1.0.0.tgz",
+          "integrity": "sha512-i27Mic4KovM/lnGsy8whRCHhc7VicJajAjTrYg11K9zfZXnYIt4k5F+kZkwjnrhKzLic/HLU4j11mjsz2G/75g==",
+          "dev": true,
+          "requires": {
+            "ajv": "^6.1.0",
+            "ajv-errors": "^1.0.0",
+            "ajv-keywords": "^3.1.0"
+          }
+        }
+      }
+    },
     "num2fraction": {
       "version": "1.2.2",
       "resolved": "https://registry.npmjs.org/num2fraction/-/num2fraction-1.2.2.tgz",
@@ -12036,6 +12075,15 @@
         "util.promisify": "^1.0.0"
       }
     },
+    "rechoir": {
+      "version": "0.6.2",
+      "resolved": "https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz",
+      "integrity": "sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q=",
+      "dev": true,
+      "requires": {
+        "resolve": "^1.1.6"
+      }
+    },
     "regenerate": {
       "version": "1.4.2",
       "resolved": "https://registry.npmjs.org/regenerate/-/regenerate-1.4.2.tgz",
@@ -12346,6 +12394,11 @@
         "inherits": "^2.0.1"
       }
     },
+    "roboto-fontface": {
+      "version": "0.10.0",
+      "resolved": "https://registry.npmjs.org/roboto-fontface/-/roboto-fontface-0.10.0.tgz",
+      "integrity": "sha512-OlwfYEgA2RdboZohpldlvJ1xngOins5d7ejqnIBWr9KaMxsnBqotpptRXTyfNRLnFpqzX6sTDt+X+a+6udnU8g=="
+    },
     "rsvp": {
       "version": "4.8.5",
       "resolved": "https://registry.npmjs.org/rsvp/-/rsvp-4.8.5.tgz",
@@ -12445,22 +12498,62 @@
       }
     },
     "sass-loader": {
-      "version": "8.0.2",
-      "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-8.0.2.tgz",
-      "integrity": "sha512-7o4dbSK8/Ol2KflEmSco4jTjQoV988bM82P9CZdmo9hR3RLnvNc0ufMNdMrB0caq38JQ/FgF4/7RcbcfKzxoFQ==",
+      "version": "10.1.1",
+      "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-10.1.1.tgz",
+      "integrity": "sha512-W6gVDXAd5hR/WHsPicvZdjAWHBcEJ44UahgxcIE196fW2ong0ZHMPO1kZuI5q0VlvMQZh32gpv69PLWQm70qrw==",
       "dev": true,
       "requires": {
-        "clone-deep": "^4.0.1",
-        "loader-utils": "^1.2.3",
-        "neo-async": "^2.6.1",
-        "schema-utils": "^2.6.1",
-        "semver": "^6.3.0"
+        "klona": "^2.0.4",
+        "loader-utils": "^2.0.0",
+        "neo-async": "^2.6.2",
+        "schema-utils": "^3.0.0",
+        "semver": "^7.3.2"
       },
       "dependencies": {
+        "loader-utils": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.0.tgz",
+          "integrity": "sha512-rP4F0h2RaWSvPEkD7BLDFQnvSf+nK+wr3ESUjNTyAGobqrijmW92zc+SO6d4p4B1wh7+B/Jg1mkQe5NYUEHtHQ==",
+          "dev": true,
+          "requires": {
+            "big.js": "^5.2.2",
+            "emojis-list": "^3.0.0",
+            "json5": "^2.1.2"
+          }
+        },
+        "lru-cache": {
+          "version": "6.0.0",
+          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
+          "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
+          "dev": true,
+          "requires": {
+            "yallist": "^4.0.0"
+          }
+        },
+        "schema-utils": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.0.0.tgz",
+          "integrity": "sha512-6D82/xSzO094ajanoOSbe4YvXWMfn2A//8Y1+MUqFAJul5Bs+yn36xbK9OtNDcRVSBJ9jjeoXftM6CfztsjOAA==",
+          "dev": true,
+          "requires": {
+            "@types/json-schema": "^7.0.6",
+            "ajv": "^6.12.5",
+            "ajv-keywords": "^3.5.2"
+          }
+        },
         "semver": {
-          "version": "6.3.0",
-          "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
-          "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
+          "version": "7.3.4",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.4.tgz",
+          "integrity": "sha512-tCfb2WLjqFAtXn4KEdxIhalnRtoKFN7nAwj0B3ZXCbQloV2tq5eDbcTmT68JJD3nRJq24/XgxtQKFIpQdtvmVw==",
+          "dev": true,
+          "requires": {
+            "lru-cache": "^6.0.0"
+          }
+        },
+        "yallist": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
           "dev": true
         }
       }
@@ -12692,15 +12785,6 @@
         "safe-buffer": "^5.0.1"
       }
     },
-    "shallow-clone": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/shallow-clone/-/shallow-clone-3.0.1.tgz",
-      "integrity": "sha512-/6KqX+GVUdqPuPPd2LxDDxzX6CAbjJehAAOKlNpqqUpAqPM6HeL8f+o3a+JsyGjn2lv0WY8UsTgUJjU9Ok55NA==",
-      "dev": true,
-      "requires": {
-        "kind-of": "^6.0.2"
-      }
-    },
     "shebang-command": {
       "version": "1.2.0",
       "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
@@ -12722,6 +12806,17 @@
       "integrity": "sha512-mRz/m/JVscCrkMyPqHc/bczi3OQHkLTqXHEFu0zDhK/qfv3UcOA4SVmRCLmos4bhjr9ekVQubj/R7waKapmiQg==",
       "dev": true
     },
+    "shelljs": {
+      "version": "0.8.4",
+      "resolved": "https://registry.npmjs.org/shelljs/-/shelljs-0.8.4.tgz",
+      "integrity": "sha512-7gk3UZ9kOfPLIAbslLzyWeGiEqx9e3rxwZM0KE6EL8GlGwjym9Mrlx5/p33bWTu9YG6vcS4MBxYZDHYr5lr8BQ==",
+      "dev": true,
+      "requires": {
+        "glob": "^7.0.0",
+        "interpret": "^1.0.0",
+        "rechoir": "^0.6.2"
+      }
+    },
     "shellwords": {
       "version": "0.1.1",
       "resolved": "https://registry.npmjs.org/shellwords/-/shellwords-0.1.1.tgz",
@@ -14381,6 +14476,43 @@
       "resolved": "https://registry.npmjs.org/vue-class-component/-/vue-class-component-7.2.6.tgz",
       "integrity": "sha512-+eaQXVrAm/LldalI272PpDe3+i4mPis0ORiMYxF6Ae4hyuCh15W8Idet7wPUEs4N4YptgFHGys4UrgNQOMyO6w=="
     },
+    "vue-cli-plugin-vuetify": {
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/vue-cli-plugin-vuetify/-/vue-cli-plugin-vuetify-2.1.0.tgz",
+      "integrity": "sha512-cvJR2+6U1PS4UUP7NnuylWfxM3LrzKnusOgrCZUyzr5abyDxf/t0TZy5EqfJwAa9/TsIO0W4gOoaoy/f4Yw0aQ==",
+      "dev": true,
+      "requires": {
+        "null-loader": "^3.0.0",
+        "semver": "^7.1.2",
+        "shelljs": "^0.8.3"
+      },
+      "dependencies": {
+        "lru-cache": {
+          "version": "6.0.0",
+          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
+          "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
+          "dev": true,
+          "requires": {
+            "yallist": "^4.0.0"
+          }
+        },
+        "semver": {
+          "version": "7.3.4",
+          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.4.tgz",
+          "integrity": "sha512-tCfb2WLjqFAtXn4KEdxIhalnRtoKFN7nAwj0B3ZXCbQloV2tq5eDbcTmT68JJD3nRJq24/XgxtQKFIpQdtvmVw==",
+          "dev": true,
+          "requires": {
+            "lru-cache": "^6.0.0"
+          }
+        },
+        "yallist": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+          "dev": true
+        }
+      }
+    },
     "vue-eslint-parser": {
       "version": "7.4.1",
       "resolved": "https://registry.npmjs.org/vue-eslint-parser/-/vue-eslint-parser-7.4.1.tgz",
@@ -14578,6 +14710,56 @@
       "integrity": "sha512-4gDntzrifFnCEvyoO8PqyJDmguXgVPxKiIxrBKjIowvL9l+N66196+72XVYR8BBf1Uv1Fgt3bGevJ+sEmxfZzw==",
       "dev": true
     },
+    "vuetify": {
+      "version": "2.4.3",
+      "resolved": "https://registry.npmjs.org/vuetify/-/vuetify-2.4.3.tgz",
+      "integrity": "sha512-i2/Df0U0sedlaCbft4NMbna7WXbTCBhKVYTMjBrLVzrYTTWqzSO7ZCxLuDRY7MjwQhn7AOec7ent9U/NyIICqA=="
+    },
+    "vuetify-loader": {
+      "version": "1.7.1",
+      "resolved": "https://registry.npmjs.org/vuetify-loader/-/vuetify-loader-1.7.1.tgz",
+      "integrity": "sha512-zRfgNxi/SeE8Nh4Vhw3aIJftYrcJWd3PqPn8+cB/F9CgBVhJo5qp2BuFL70k33G1kTaBvcjYgM+vZc9nvvU3xg==",
+      "dev": true,
+      "requires": {
+        "decache": "^4.6.0",
+        "file-loader": "^6.2.0",
+        "loader-utils": "^2.0.0"
+      },
+      "dependencies": {
+        "file-loader": {
+          "version": "6.2.0",
+          "resolved": "https://registry.npmjs.org/file-loader/-/file-loader-6.2.0.tgz",
+          "integrity": "sha512-qo3glqyTa61Ytg4u73GultjHGjdRyig3tG6lPtyX/jOEJvHif9uB0/OCI2Kif6ctF3caQTW2G5gym21oAsI4pw==",
+          "dev": true,
+          "requires": {
+            "loader-utils": "^2.0.0",
+            "schema-utils": "^3.0.0"
+          }
+        },
+        "loader-utils": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/loader-utils/-/loader-utils-2.0.0.tgz",
+          "integrity": "sha512-rP4F0h2RaWSvPEkD7BLDFQnvSf+nK+wr3ESUjNTyAGobqrijmW92zc+SO6d4p4B1wh7+B/Jg1mkQe5NYUEHtHQ==",
+          "dev": true,
+          "requires": {
+            "big.js": "^5.2.2",
+            "emojis-list": "^3.0.0",
+            "json5": "^2.1.2"
+          }
+        },
+        "schema-utils": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/schema-utils/-/schema-utils-3.0.0.tgz",
+          "integrity": "sha512-6D82/xSzO094ajanoOSbe4YvXWMfn2A//8Y1+MUqFAJul5Bs+yn36xbK9OtNDcRVSBJ9jjeoXftM6CfztsjOAA==",
+          "dev": true,
+          "requires": {
+            "@types/json-schema": "^7.0.6",
+            "ajv": "^6.12.5",
+            "ajv-keywords": "^3.5.2"
+          }
+        }
+      }
+    },
     "vuex": {
       "version": "3.6.2",
       "resolved": "https://registry.npmjs.org/vuex/-/vuex-3.6.2.tgz",
diff --git a/Client/package.json b/Client/package.json
index 7416cff2..842bbdab 100644
--- a/Client/package.json
+++ b/Client/package.json
@@ -11,10 +11,12 @@
   "dependencies": {
     "core-js": "^3.6.5",
     "register-service-worker": "^1.7.1",
+    "roboto-fontface": "*",
     "vue": "^2.6.11",
     "vue-class-component": "^7.2.3",
     "vue-property-decorator": "^9.1.2",
     "vue-router": "^3.2.0",
+    "vuetify": "^2.4.0",
     "vuex": "^3.4.0"
   },
   "devDependencies": {
@@ -35,10 +37,12 @@
     "eslint-plugin-vue": "^6.2.2",
     "pug": "^3.0.0",
     "pug-plain-loader": "^1.1.0",
-    "sass": "^1.26.5",
-    "sass-loader": "^8.0.2",
+    "sass": "^1.32.0",
+    "sass-loader": "^10.0.0",
     "typescript": "~3.9.3",
-    "vue-template-compiler": "^2.6.11"
+    "vue-cli-plugin-vuetify": "~2.1.0",
+    "vue-template-compiler": "^2.6.11",
+    "vuetify-loader": "^1.7.0"
   },
   "eslintConfig": {
     "root": true,
diff --git a/Client/public/index.html b/Client/public/index.html
index 3e5a1396..41235286 100644
--- a/Client/public/index.html
+++ b/Client/public/index.html
@@ -1,5 +1,5 @@
 <!DOCTYPE html>
-<html lang="">
+<html lang="en">
   <head>
     <meta charset="utf-8">
     <meta http-equiv="X-UA-Compatible" content="IE=edge">
diff --git a/Client/src/App.vue b/Client/src/App.vue
index 0e8f14e2..3c85f6f0 100644
--- a/Client/src/App.vue
+++ b/Client/src/App.vue
@@ -1,29 +1,61 @@
-<template lang="pug">
-  div#app
-    div#nav
-      router-link(to="/") Início
-    router-view
+<template>
+  <v-app>
+    <v-app-bar
+      app
+      color="primary"
+      dark
+    >
+      <div class="d-flex align-center">
+        <v-img
+          alt="Vuetify Logo"
+          class="shrink mr-2"
+          contain
+          src="https://cdn.vuetifyjs.com/images/logos/vuetify-logo-dark.png"
+          transition="scale-transition"
+          width="40"
+        />
+
+        <v-img
+          alt="Vuetify Name"
+          class="shrink mt-1 hidden-sm-and-down"
+          contain
+          min-width="100"
+          src="https://cdn.vuetifyjs.com/images/logos/vuetify-name-dark.png"
+          width="100"
+        />
+      </div>
+
+      <v-spacer></v-spacer>
+
+      <v-btn
+        href="https://github.com/vuetifyjs/vuetify/releases/latest"
+        target="_blank"
+        text
+      >
+        <span class="mr-2">Latest Release</span>
+        <v-icon>mdi-open-in-new</v-icon>
+      </v-btn>
+    </v-app-bar>
+
+    <v-main>
+      <HelloWorld/>
+    </v-main>
+  </v-app>
 </template>
 
-<style lang="scss">
-#app {
-  font-family: Avenir, Helvetica, Arial, sans-serif;
-  -webkit-font-smoothing: antialiased;
-  -moz-osx-font-smoothing: grayscale;
-  text-align: center;
-  color: #2c3e50;
-}
-
-#nav {
-  padding: 30px;
-
-  a {
-    font-weight: bold;
-    color: #2c3e50;
-
-    &.router-link-exact-active {
-      color: #42b983;
-    }
-  }
-}
-</style>
+<script lang="ts">
+import Vue from 'vue';
+import HelloWorld from './components/HelloWorld.vue';
+
+export default Vue.extend({
+  name: 'App',
+
+  components: {
+    HelloWorld,
+  },
+
+  data: () => ({
+    //
+  }),
+});
+</script>
diff --git a/Client/src/components/HelloWorld.vue b/Client/src/components/HelloWorld.vue
index 5d8eb595..463620ac 100644
--- a/Client/src/components/HelloWorld.vue
+++ b/Client/src/components/HelloWorld.vue
@@ -1,63 +1,153 @@
 <template>
-  <div class="hello">
-    <h1>{{ msg }}</h1>
-    <p>
-      For a guide and recipes on how to configure / customize this project,<br>
-      check out the
-      <a href="https://cli.vuejs.org" target="_blank" rel="noopener">vue-cli documentation</a>.
-    </p>
-    <h3>Installed CLI Plugins</h3>
-    <ul>
-      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-babel" target="_blank" rel="noopener">babel</a></li>
-      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-typescript" target="_blank" rel="noopener">typescript</a></li>
-      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-pwa" target="_blank" rel="noopener">pwa</a></li>
-      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-router" target="_blank" rel="noopener">router</a></li>
-      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-vuex" target="_blank" rel="noopener">vuex</a></li>
-      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">eslint</a></li>
-      <li><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-unit-jest" target="_blank" rel="noopener">unit-jest</a></li>
-    </ul>
-    <h3>Essential Links</h3>
-    <ul>
-      <li><a href="https://vuejs.org" target="_blank" rel="noopener">Core Docs</a></li>
-      <li><a href="https://forum.vuejs.org" target="_blank" rel="noopener">Forum</a></li>
-      <li><a href="https://chat.vuejs.org" target="_blank" rel="noopener">Community Chat</a></li>
-      <li><a href="https://twitter.com/vuejs" target="_blank" rel="noopener">Twitter</a></li>
-      <li><a href="https://news.vuejs.org" target="_blank" rel="noopener">News</a></li>
-    </ul>
-    <h3>Ecosystem</h3>
-    <ul>
-      <li><a href="https://router.vuejs.org" target="_blank" rel="noopener">vue-router</a></li>
-      <li><a href="https://vuex.vuejs.org" target="_blank" rel="noopener">vuex</a></li>
-      <li><a href="https://github.com/vuejs/vue-devtools#vue-devtools" target="_blank" rel="noopener">vue-devtools</a></li>
-      <li><a href="https://vue-loader.vuejs.org" target="_blank" rel="noopener">vue-loader</a></li>
-      <li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="noopener">awesome-vue</a></li>
-    </ul>
-  </div>
+  <v-container>
+    <v-row class="text-center">
+      <v-col cols="12">
+        <v-img
+          :src="require('../assets/logo.svg')"
+          class="my-3"
+          contain
+          height="200"
+        />
+      </v-col>
+
+      <v-col class="mb-4">
+        <h1 class="display-2 font-weight-bold mb-3">
+          Welcome to Vuetify
+        </h1>
+
+        <p class="subheading font-weight-regular">
+          For help and collaboration with other Vuetify developers,
+          <br>please join our online
+          <a
+            href="https://community.vuetifyjs.com"
+            target="_blank"
+          >Discord Community</a>
+        </p>
+      </v-col>
+
+      <v-col
+        class="mb-5"
+        cols="12"
+      >
+        <h2 class="headline font-weight-bold mb-3">
+          What's next?
+        </h2>
+
+        <v-row justify="center">
+          <a
+            v-for="(next, i) in whatsNext"
+            :key="i"
+            :href="next.href"
+            class="subheading mx-3"
+            target="_blank"
+          >
+            {{ next.text }}
+          </a>
+        </v-row>
+      </v-col>
+
+      <v-col
+        class="mb-5"
+        cols="12"
+      >
+        <h2 class="headline font-weight-bold mb-3">
+          Important Links
+        </h2>
+
+        <v-row justify="center">
+          <a
+            v-for="(link, i) in importantLinks"
+            :key="i"
+            :href="link.href"
+            class="subheading mx-3"
+            target="_blank"
+          >
+            {{ link.text }}
+          </a>
+        </v-row>
+      </v-col>
+
+      <v-col
+        class="mb-5"
+        cols="12"
+      >
+        <h2 class="headline font-weight-bold mb-3">
+          Ecosystem
+        </h2>
+
+        <v-row justify="center">
+          <a
+            v-for="(eco, i) in ecosystem"
+            :key="i"
+            :href="eco.href"
+            class="subheading mx-3"
+            target="_blank"
+          >
+            {{ eco.text }}
+          </a>
+        </v-row>
+      </v-col>
+    </v-row>
+  </v-container>
 </template>
 
 <script lang="ts">
-import { Component, Prop, Vue } from 'vue-property-decorator';
+  import Vue from 'vue'
 
-@Component
-export default class HelloWorld extends Vue {
-  @Prop() private msg!: string;
-}
-</script>
+  export default Vue.extend({
+    name: 'HelloWorld',
 
-<!-- Add "scoped" attribute to limit CSS to this component only -->
-<style scoped lang="scss">
-h3 {
-  margin: 40px 0 0;
-}
-ul {
-  list-style-type: none;
-  padding: 0;
-}
-li {
-  display: inline-block;
-  margin: 0 10px;
-}
-a {
-  color: #42b983;
-}
-</style>
+    data: () => ({
+      ecosystem: [
+        {
+          text: 'vuetify-loader',
+          href: 'https://github.com/vuetifyjs/vuetify-loader',
+        },
+        {
+          text: 'github',
+          href: 'https://github.com/vuetifyjs/vuetify',
+        },
+        {
+          text: 'awesome-vuetify',
+          href: 'https://github.com/vuetifyjs/awesome-vuetify',
+        },
+      ],
+      importantLinks: [
+        {
+          text: 'Documentation',
+          href: 'https://vuetifyjs.com',
+        },
+        {
+          text: 'Chat',
+          href: 'https://community.vuetifyjs.com',
+        },
+        {
+          text: 'Made with Vuetify',
+          href: 'https://madewithvuejs.com/vuetify',
+        },
+        {
+          text: 'Twitter',
+          href: 'https://twitter.com/vuetifyjs',
+        },
+        {
+          text: 'Articles',
+          href: 'https://medium.com/vuetify',
+        },
+      ],
+      whatsNext: [
+        {
+          text: 'Explore components',
+          href: 'https://vuetifyjs.com/components/api-explorer',
+        },
+        {
+          text: 'Select a layout',
+          href: 'https://vuetifyjs.com/getting-started/pre-made-layouts',
+        },
+        {
+          text: 'Frequently Asked Questions',
+          href: 'https://vuetifyjs.com/getting-started/frequently-asked-questions',
+        },
+      ],
+    }),
+  })
+</script>
diff --git a/Client/src/main.ts b/Client/src/main.ts
index d12df39b..a31f1de1 100644
--- a/Client/src/main.ts
+++ b/Client/src/main.ts
@@ -3,11 +3,13 @@ import App from './App.vue'
 import './registerServiceWorker'
 import router from './router'
 import store from './store'
+import vuetify from './plugins/vuetify';
 
 Vue.config.productionTip = false
 
 new Vue({
   router,
   store,
+  vuetify,
   render: h => h(App)
 }).$mount('#app')
diff --git a/Client/src/store/index.ts b/Client/src/store/index.ts
index 332b9169..5db41bb9 100644
--- a/Client/src/store/index.ts
+++ b/Client/src/store/index.ts
@@ -1,15 +1,18 @@
-import Vue from 'vue'
-import Vuex from 'vuex'
+import Vue from 'vue';
+import Vuex from 'vuex';
+import { entities } from './entities/index';
+import { RootState } from './types';
 
-Vue.use(Vuex)
+Vue.use(Vuex);
 
-export default new Vuex.Store({
+export default new Vuex.Store<RootState>({
   state: {
   },
+  modules: {
+    entities,
+  },
   mutations: {
   },
   actions: {
   },
-  modules: {
-  }
-})
+});
\ No newline at end of file
diff --git a/Server/Innkeeper.Sandbox/DemoPaper.cs b/Server/Innkeeper.Sandbox/DemoPaper.cs
index e0dc44ef..e076dee1 100644
--- a/Server/Innkeeper.Sandbox/DemoPaper.cs
+++ b/Server/Innkeeper.Sandbox/DemoPaper.cs
@@ -1,39 +1,76 @@
 ﻿using System;
+using System.Linq;
 using System.Threading;
 using System.Threading.Tasks;
 using Keep.Paper.Design;
+using Keep.Paper.Design.Modeling;
 using Keep.Paper.Design.Rendering;
 using Keep.Paper.Design.Serialization;
 using Keep.Tools;
+using Keep.Tools.Collections;
 using Keep.Tools.Reflection;
 
 namespace Innkeeper.Sandbox
 {
   [Expose]
-  public class DemoRenderer : IDesignRenderer
+  public class DemoPaper : IPaper
   {
-    public async Task RenderAsync(IDesignContext ctx, IRequest req,
-      IResponse res, NextAsync next)
-    {
-      var isDemo =
-        req.Target.Type.EqualsIgnoreCase("Data") &&
-        req.Target.Name.EqualsIgnoreCase("Sandbox");
+    public Response<Paper> GetPaper(Request request)
+      => Response.For(new Paper
+      {
+        DataSet = new DataSet
+        {
+          Data = new Collection<IRef<Data>>(
+            from id in Enumerable.Range(1, 10)
+            select new Data
+            {
+              Properties = new
+              {
+                Id = id,
+                Name = $"Data ID {id}"
+              }
+            }
+          )
+        },
+        Disposition = new Disposition.Grid()
+      });
 
-      if (!isDemo)
+    public Response<Data> GetData(Request request, int id)
+      => Response.For(new Data
       {
-        await next.Invoke(ctx, req, res);
-        return;
-      }
+        Properties = new
+        {
+          Id = id,
+          Name = $"Data ID {id}"
+        }
+      });
 
-      var data = new Data();
-      data.Self = req.Target;
-      data.Properties = new
+    public Response<DataSet> GetDataSet(Request request)
+      => Response.For(new DataSet
       {
-        Id = 10,
-        Name = "Tenth"
-      };
+        Data = new Collection<IRef<Data>>(
+          from id in Enumerable.Range(1, 10)
+          select new Data
+          {
+            Properties = new
+            {
+              Id = id,
+              Name = $"Data ID {id}"
+            }
+          }
+        )
+      });
+
+    public Response<Disposition.Card> GetCard(Request request)
+      => Response.For(new Disposition.Card());
+
+    public Response<Disposition.Edit> GetEdit(Request request)
+      => Response.For(new Disposition.Edit());
+
+    public Response<Disposition.List> GetList(Request request)
+      => Response.For(new Disposition.List());
 
-      await res.WriteAsync(data);
-    }
+    public Response<Disposition.Grid> GetGrid(Request request)
+      => Response.For(new Disposition.Grid());
   }
 }
diff --git a/Server/Keep.Hosting.Modules.Paper/CoreConfiguration.cs b/Server/Keep.Hosting.Modules.Paper/CoreConfiguration.cs
index 432bc27b..e6805f86 100644
--- a/Server/Keep.Hosting.Modules.Paper/CoreConfiguration.cs
+++ b/Server/Keep.Hosting.Modules.Paper/CoreConfiguration.cs
@@ -5,6 +5,7 @@ using System.Text.Json;
 using System.Text.RegularExpressions;
 using System.Threading.Tasks;
 using Keep.Paper.Design.Core;
+using Keep.Paper.Design.Rendering;
 using Microsoft.AspNetCore.Builder;
 using Microsoft.Extensions.DependencyInjection;
 
@@ -14,11 +15,15 @@ namespace Keep.Hosting.Modules.SqlJobs
   {
     public static void AddInnkeeperPaper(this IServiceCollection services)
     {
-      services.AddTransient<DesignMiddleware>();
+      services.AddSingleton<RendererCollection>();
+      services.AddSingleton<DesignMiddleware>();
     }
 
     public static void UseInnkeeperPaper(this IApplicationBuilder app)
     {
+      // Forçando a inicialização dos renderizadores...
+      app.ApplicationServices.GetService<RendererCollection>();
+
       app.Map("/Api/1", app => app.UseMiddleware<DesignMiddleware>());
     }
   }
diff --git a/Server/Keep.Paper/Design.Core/DefaultOutput.cs b/Server/Keep.Paper/Design.Core/DefaultOutput.cs
index b27fcf7d..24709159 100644
--- a/Server/Keep.Paper/Design.Core/DefaultOutput.cs
+++ b/Server/Keep.Paper/Design.Core/DefaultOutput.cs
@@ -1,26 +1,27 @@
 ﻿using System;
 using System.IO;
+using System.Threading;
+using System.Threading.Tasks;
 using Keep.Paper.Design.Rendering;
+using Keep.Paper.Design.Serialization;
 using Microsoft.AspNetCore.Http;
 
 namespace Keep.Paper.Design.Core
 {
-  public class DefaultResponse : IResponse
+  public class DefaultOutput : IOutput
   {
-    private readonly HttpRequest req;
     private readonly HttpResponse res;
 
-    public DefaultResponse(HttpContext httpContext)
+    public DefaultOutput(HttpContext httpContext)
     {
-      this.req = httpContext.Request;
       this.res = httpContext.Response;
-      this.Format = new DefaultFormat(httpContext);
+      this.BodyFormat = new DefaultFormat(httpContext);
       this.Body = res.Body;
     }
 
     public AcceptedFormats AcceptedFormats { get; private set; }
 
-    public IFormat Format { get; private set; }
+    public IFormat BodyFormat { get; private set; }
 
     public Stream Body { get; private set; }
   }
diff --git a/Server/Keep.Paper/Design.Core/DesignMiddleware.cs b/Server/Keep.Paper/Design.Core/DesignMiddleware.cs
index b81dad3d..625c3cdf 100644
--- a/Server/Keep.Paper/Design.Core/DesignMiddleware.cs
+++ b/Server/Keep.Paper/Design.Core/DesignMiddleware.cs
@@ -1,5 +1,6 @@
 ﻿using System;
 using System.Threading.Tasks;
+using Keep.Hosting.Extensions;
 using Keep.Paper.Design.Rendering;
 using Keep.Tools.Collections;
 using Microsoft.AspNetCore.Http;
@@ -8,31 +9,30 @@ namespace Keep.Paper.Design.Core
 {
   public class DesignMiddleware : IMiddleware
   {
-    private readonly IServiceProvider services;
+    private readonly RenderingPipeline pipeline;
 
     public DesignMiddleware(IServiceProvider services)
     {
-      this.services = services;
+      this.pipeline = services.Instantiate<RenderingPipeline>();
     }
 
     public async Task InvokeAsync(HttpContext httpContext, RequestDelegate next)
     {
       var ctx = new DefaultContext();
-      var res = new DefaultResponse(httpContext);
+      var @out = new DefaultOutput(httpContext);
 
-      var recover = new DefaultRequestRecover(httpContext);
+      var recover = new RequestRecover(httpContext);
 
       var ret = await recover.TryRecoverRequestAsync();
       var req = ret.Value;
 
       if (!ret.Ok)
       {
-        await res.WriteAsync(Status.Create(ret.Status.Code, ret.Fault.Message));
+        await @out.WriteAsync(Response.For(ret));
         return;
       }
 
-      var pipeline = new RenderingPipeline(services);
-      await pipeline.RenderAsync(ctx, req, res);
+      await pipeline.RenderAsync(ctx, req, @out);
     }
   }
 }
diff --git a/Server/Keep.Paper/Design.Core/RequestRecover.cs b/Server/Keep.Paper/Design.Core/RequestRecover.cs
index 27d46762..638ebbf4 100644
--- a/Server/Keep.Paper/Design.Core/RequestRecover.cs
+++ b/Server/Keep.Paper/Design.Core/RequestRecover.cs
@@ -10,11 +10,11 @@ using Microsoft.AspNetCore.Http;
 
 namespace Keep.Paper.Design.Core
 {
-  public class DefaultRequestRecover
+  public class RequestRecover
   {
     private readonly HttpContext httpContext;
 
-    public DefaultRequestRecover(HttpContext httpContext)
+    public RequestRecover(HttpContext httpContext)
     {
       this.httpContext = httpContext;
     }
diff --git a/Server/Keep.Paper/Design.Modeling/DesignAttribute.cs b/Server/Keep.Paper/Design.Modeling/DesignAttribute.cs
index 929ea007..1b3be2e8 100644
--- a/Server/Keep.Paper/Design.Modeling/DesignAttribute.cs
+++ b/Server/Keep.Paper/Design.Modeling/DesignAttribute.cs
@@ -1,10 +1,52 @@
 ﻿using System;
+using System.Reflection;
+using Keep.Tools.Reflection;
+
 namespace Keep.Paper.Design.Modeling
 {
-  public class DesignAttribute
+  [AttributeUsage(
+    AttributeTargets.Method |
+    AttributeTargets.Class |
+    AttributeTargets.Interface,
+    AllowMultiple = false,
+    Inherited = true) ]
+  public class DesignAttribute : Attribute
   {
-    public DesignAttribute()
+    public DesignAttribute(string type, string name)
     {
+      this.Type = type;
+      this.Name = name;
+    }
+
+    public string Type { get; set; }
+    public string Name { get; set; }
+
+    public static string NameType(Type type)
+    {
+      var attr = type._Attribute<DesignAttribute>();
+      var name = attr?.Name ?? type.Name;
+      return name;
+    }
+
+    public static string NameMethod(MethodInfo method, Type type = null)
+    {
+      type ??= method.DeclaringType;
+      var typeAttr = type._Attribute<DesignAttribute>();
+      var typeName = typeAttr?.Name ?? type.Name;
+
+      var methodAttr = method._Attribute<DesignAttribute>();
+      var methodName = methodAttr?.Name ?? method.Name;
+
+      if (methodName.EndsWith("Async"))
+      {
+        methodName = methodName[..^5];
+      }
+
+      var name = methodName.StartsWith("/")
+        ? methodName[1..]
+        : $"{typeName}.{methodName}";
+
+      return name;
     }
   }
 }
diff --git a/Server/Keep.Paper/Design.Modeling/ObjectRenderer.cs b/Server/Keep.Paper/Design.Modeling/ObjectRenderer.cs
index 6fd91562..223f9e62 100644
--- a/Server/Keep.Paper/Design.Modeling/ObjectRenderer.cs
+++ b/Server/Keep.Paper/Design.Modeling/ObjectRenderer.cs
@@ -7,6 +7,7 @@ using Keep.Hosting.Extensions;
 using Keep.Paper.Design.Rendering;
 using Keep.Tools;
 using Keep.Tools.Collections;
+using Keep.Tools.Reflection;
 
 namespace Keep.Paper.Design.Modeling
 {
@@ -34,26 +35,27 @@ namespace Keep.Paper.Design.Modeling
         from type in types
         from method in type.GetMethods(flags)
         where typeof(IDesign).IsAssignableFrom(method.ReturnType)
+           || typeof(Task<IDesign>).IsAssignableFrom(method.ReturnType)
         select new Entry { Type = type, Method = method };
 
       foreach (var entry in entries)
       {
-        var @ref = Ref.Create(entry.Method);
-        papers.Add(@ref, entry);
+        var name = DesignAttribute.NameMethod(entry.Method, entry.Type);
+        papers.Add(name, entry);
 
-        Debug.WriteLine(@ref);
+        Debug.WriteLine(name);
       }
 
       return papers;
     }
 
     public async Task RenderAsync(IDesignContext ctx, IRequest req,
-      IResponse res, NextAsync next)
+      IOutput @out, NextAsync next)
     {
       var entry = catalog[req.Target];
       if (entry == null)
       {
-        await next.Invoke(ctx, req, res);
+        await next.Invoke(ctx, req, @out);
         return;
       }
 
@@ -81,12 +83,14 @@ namespace Keep.Paper.Design.Modeling
       var result = method.Invoke(instance, args);
       var design = (IDesign)result;
 
-      if (design is Entity entity)
-      {
-        entity.Self ??= req.Target;
-      }
+      var response = design as IResponse;
+      if (response == null)
+        throw new NotSupportedException(
+          $"Tipo de responta ainda não suportado: {design.GetType().FullName}");
+
+      response.Data.Self ??= req.Target;
 
-      await res.WriteAsync(design);
+      await @out.WriteAsync(response);
     }
 
     public class Entry
diff --git a/Server/Keep.Paper/Design.Rendering/IDesignRenderer.cs b/Server/Keep.Paper/Design.Rendering/IDesignRenderer.cs
index 5b33c453..37110389 100644
--- a/Server/Keep.Paper/Design.Rendering/IDesignRenderer.cs
+++ b/Server/Keep.Paper/Design.Rendering/IDesignRenderer.cs
@@ -6,7 +6,7 @@ namespace Keep.Paper.Design.Rendering
 {
   public interface IDesignRenderer
   {
-    Task RenderAsync(IDesignContext ctx, IRequest req, IResponse res,
+    Task RenderAsync(IDesignContext ctx, IRequest req, IOutput @out,
       NextAsync next);
   }
 }
diff --git a/Server/Keep.Paper/Design.Rendering/IOutput.cs b/Server/Keep.Paper/Design.Rendering/IOutput.cs
index 3176ffc2..6cf8de2f 100644
--- a/Server/Keep.Paper/Design.Rendering/IOutput.cs
+++ b/Server/Keep.Paper/Design.Rendering/IOutput.cs
@@ -5,11 +5,11 @@ using System.Threading.Tasks;
 
 namespace Keep.Paper.Design.Rendering
 {
-  public interface IResponse
+  public interface IOutput
   {
     AcceptedFormats AcceptedFormats { get; }
 
-    IFormat Format { get; }
+    IFormat BodyFormat { get; }
 
     Stream Body { get; }
   }
diff --git a/Server/Keep.Paper/Design.Rendering/IResponse.cs b/Server/Keep.Paper/Design.Rendering/IResponse.cs
index 807f482c..66f4c140 100644
--- a/Server/Keep.Paper/Design.Rendering/IResponse.cs
+++ b/Server/Keep.Paper/Design.Rendering/IResponse.cs
@@ -1,10 +1,20 @@
 ﻿using System;
+using Keep.Tools.Collections;
+
 namespace Keep.Paper.Design.Rendering
 {
-  public class IResponse
+  public interface IResponse : IDesign
   {
-    public IResponse()
-    {
-    }
+    bool? Ok { get; set; }
+
+    IEntity Data { get; set; }
+
+    Collection<IEntity> Embedded { get; set; }
+
+    int? Code { get; set; }
+
+    string[] Messages { get; set; }
+
+    string Location { get; set; }
   }
 }
diff --git a/Server/Keep.Paper/Design.Rendering/NextAsync.cs b/Server/Keep.Paper/Design.Rendering/NextAsync.cs
index 29d65bf6..eac87f67 100644
--- a/Server/Keep.Paper/Design.Rendering/NextAsync.cs
+++ b/Server/Keep.Paper/Design.Rendering/NextAsync.cs
@@ -4,5 +4,5 @@ using System.Threading.Tasks;
 
 namespace Keep.Paper.Design.Rendering
 {
-  public delegate Task NextAsync(IDesignContext ctx, IRequest req, IResponse res);
+  public delegate Task NextAsync(IDesignContext ctx, IRequest req, IOutput @out);
 }
diff --git a/Server/Keep.Paper/Design.Rendering/OutputExtensions.cs b/Server/Keep.Paper/Design.Rendering/OutputExtensions.cs
index 419df1b0..09a4d4cc 100644
--- a/Server/Keep.Paper/Design.Rendering/OutputExtensions.cs
+++ b/Server/Keep.Paper/Design.Rendering/OutputExtensions.cs
@@ -8,19 +8,19 @@ using Keep.Paper.Design.Serialization;
 
 namespace Keep.Paper.Design.Rendering
 {
-  public static class ResponseExtensions
+  public static class OutputExtensions
   {
-    public static async Task WriteAsync(this IResponse res, IDesign @object,
+    public static async Task WriteAsync(this IOutput @out, IResponse res,
       CancellationToken stopToken = default)
     {
-      res.Format.MimeType = "application/json";
-      res.Format.Charset = "UTF-8";
-      res.Format.Compression = null;
-      res.Format.Language = null;
+      @out.BodyFormat.MimeType = "application/json";
+      @out.BodyFormat.Charset = "UTF-8";
+      @out.BodyFormat.Compression = null;
+      @out.BodyFormat.Language = null;
 
       var serializer = new DesignSerializer();
-      await serializer.SerializeAsync(res.Body, @object, stopToken);
-      await res.Body.FlushAsync();
+      await serializer.SerializeAsync(@out.Body, res, stopToken);
+      await @out.Body.FlushAsync();
     }
   }
 }
\ No newline at end of file
diff --git a/Server/Keep.Paper/Design.Rendering/RendererCollection.cs b/Server/Keep.Paper/Design.Rendering/RendererCollection.cs
index 74a37b17..553040f0 100644
--- a/Server/Keep.Paper/Design.Rendering/RendererCollection.cs
+++ b/Server/Keep.Paper/Design.Rendering/RendererCollection.cs
@@ -1,10 +1,39 @@
 ﻿using System;
+using Keep.Hosting.Extensions;
+using Keep.Tools;
+using Keep.Tools.Collections;
+
 namespace Keep.Paper.Design.Rendering
 {
-  public class RendererCollection
+  public class RendererCollection : Collection<IDesignRenderer>
   {
-    public RendererCollection()
+    public RendererCollection(IServiceProvider services)
     {
+      ImportExposedRenderers(services);
+    }
+
+    private void ImportExposedRenderers(IServiceProvider services)
+    {
+      try
+      {
+        var types = ExposedTypes.GetTypes<IDesignRenderer>();
+        foreach (var type in types)
+        {
+          try
+          {
+            var renderer = (IDesignRenderer)services.Instantiate(type);
+            Add(renderer);
+          }
+          catch (Exception ex)
+          {
+            ex.Trace();
+          }
+        }
+      }
+      catch (Exception ex)
+      {
+        ex.Trace();
+      }
     }
   }
 }
diff --git a/Server/Keep.Paper/Design.Rendering/RenderingPipeline.cs b/Server/Keep.Paper/Design.Rendering/RenderingPipeline.cs
index 7d7b56f9..9471e822 100644
--- a/Server/Keep.Paper/Design.Rendering/RenderingPipeline.cs
+++ b/Server/Keep.Paper/Design.Rendering/RenderingPipeline.cs
@@ -11,63 +11,39 @@ namespace Keep.Paper.Design.Rendering
 {
   public class RenderingPipeline
   {
-    private readonly List<IDesignRenderer> renderers;
+    private readonly RendererCollection renderers;
 
-    public RenderingPipeline(IServiceProvider services)
+    public RenderingPipeline(RendererCollection renderers)
     {
-      this.renderers = new List<IDesignRenderer>();
-      ImportExposedRenderers(services);
-    }
-
-    private void ImportExposedRenderers(IServiceProvider services)
-    {
-      try
-      {
-        var types = ExposedTypes.GetTypes<IDesignRenderer>();
-        foreach (var type in types)
-        {
-          try
-          {
-            var renderer = (IDesignRenderer)services.Instantiate(type);
-            renderers.Add(renderer);
-          }
-          catch (Exception ex)
-          {
-            ex.Trace();
-          }
-        }
-      }
-      catch (Exception ex)
-      {
-        ex.Trace();
-      }
+      this.renderers = renderers;
     }
 
     public async Task RenderAsync(IDesignContext ctx, IRequest req,
-      IResponse res)
+      IOutput @out)
     {
       try
       {
         var chain = renderers.GetEnumerator();
 
         NextAsync next = null;
-        next = new NextAsync(async (ctx, req, res) =>
+        next = new NextAsync(async (ctx, req, @out) =>
         {
           if (!chain.MoveNext())
           {
-            await res.WriteAsync(Status.Create(StatusCodes.Status404NotFound,
-              "O recurso procurado não existe."));
+            await @out.WriteAsync(Response.For(StatusCodes.Status404NotFound));
             return;
           }
-          await chain.Current.RenderAsync(ctx, req, res, next);
+          await chain.Current.RenderAsync(ctx, req, @out, next);
         });
 
-        await next.Invoke(ctx, req, res);
+        await next.Invoke(ctx, req, @out);
       }
       catch (Exception ex)
       {
-        await res.WriteAsync(Status.Create(HttpStatusCode.InternalServerError,
-          ex.GetCauseMessage()));
+        await @out.WriteAsync(Response.For(
+          HttpStatusCode.InternalServerError,
+          ex.GetCauseMessages())
+        );
       }
     }
   }
diff --git a/Server/Keep.Paper/Design.Rendering/ResponseExtensions.cs b/Server/Keep.Paper/Design.Rendering/ResponseExtensions.cs
index 755a8e4f..6cfa1864 100644
--- a/Server/Keep.Paper/Design.Rendering/ResponseExtensions.cs
+++ b/Server/Keep.Paper/Design.Rendering/ResponseExtensions.cs
@@ -1,10 +1,26 @@
 ﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using Keep.Tools.Collections;
+
 namespace Keep.Paper.Design.Rendering
 {
-  public class ResponseExtensions
+  public static class ResponseExtensions
   {
-    public ResponseExtensions()
+    public static void Normalize(this Response response)
     {
+      var entities = DescendantsAndSelf(response.Data);
+      entities.ForEach(entity => entity.Self ??= Ref.ForLocalReference(entity));
+      response.Embedded ??= new Collection<IEntity>();
+      response.Embedded.AddMany(entities.Except(response.Embedded));
+    }
+
+    private static IEnumerable<IEntity> DescendantsAndSelf(IEntity entity)
+    {
+      yield return entity;
+      foreach (var child in entity.Children())
+        foreach (var item in DescendantsAndSelf(child))
+          yield return item;
     }
   }
 }
diff --git a/Server/Keep.Paper/Design/Data.cs b/Server/Keep.Paper/Design/Data.cs
index 18aaccb3..4a835d29 100644
--- a/Server/Keep.Paper/Design/Data.cs
+++ b/Server/Keep.Paper/Design/Data.cs
@@ -1,8 +1,12 @@
 ﻿using System;
+using System.Collections.Generic;
+
 namespace Keep.Paper.Design
 {
-  public class Data : Entity
+  public class Data : Entity<Data>
   {
     public object Properties { get; set; }
+
+    protected override IEnumerable<IEntity> Children() { yield break; }
   }
 }
diff --git a/Server/Keep.Paper/Design/DataSet.cs b/Server/Keep.Paper/Design/DataSet.cs
index 4075d428..04546ff5 100644
--- a/Server/Keep.Paper/Design/DataSet.cs
+++ b/Server/Keep.Paper/Design/DataSet.cs
@@ -1,8 +1,14 @@
 ﻿using System;
+using System.Collections.Generic;
+using System.Linq;
+using Keep.Tools.Collections;
+
 namespace Keep.Paper.Design
 {
-  public class Data : Entity<Data>
+  public class DataSet : Entity<DataSet>
   {
-    public object Properties { get; set; }
+    public Collection<IRef<Data>> Data { get; set; }
+
+    protected override IEnumerable<IEntity> Children() => Data.OfType<IEntity>();
   }
 }
diff --git a/Server/Keep.Paper/Design/Disposition.cs b/Server/Keep.Paper/Design/Disposition.cs
index 6b64ce22..a3487610 100644
--- a/Server/Keep.Paper/Design/Disposition.cs
+++ b/Server/Keep.Paper/Design/Disposition.cs
@@ -1,9 +1,27 @@
 ﻿using System;
+using System.Collections.Generic;
+
 namespace Keep.Paper.Design
 {
-  public class Disposition
+  public abstract class Disposition : Entity<Disposition>
   {
-    public Disposition()
+    public string Name => GetType().Name;
+
+    protected override IEnumerable<IEntity> Children() { yield break; }
+
+    public class Card : Disposition
+    {
+    }
+
+    public class Edit : Disposition
+    {
+    }
+
+    public class Grid : Disposition
+    {
+    }
+
+    public class List : Disposition
     {
     }
   }
diff --git a/Server/Keep.Paper/Design/Spec/Entity`1.cs b/Server/Keep.Paper/Design/Spec/Entity`1.cs
index 5c59930f..bcb632c0 100644
--- a/Server/Keep.Paper/Design/Spec/Entity`1.cs
+++ b/Server/Keep.Paper/Design/Spec/Entity`1.cs
@@ -1,10 +1,40 @@
 ﻿using System;
+using System.Collections.Generic;
+using Keep.Tools.Collections;
+
 namespace Keep.Paper.Design
 {
-  public class Entity_1
+  public abstract class Entity<T> : IEntity, IRef<T>
+    where T : class, IEntity, IRef<T>
   {
-    public Entity_1()
+    public Ref<T> Self { get; set; }
+
+    IRef IEntity.Self
     {
+      get => Self;
+      set => Self = value.CastTo<T>();
     }
+
+    string IRef.BaseType
+    {
+      get => Self?.BaseType;
+      set => (Self ??= new Ref<T>()).BaseType = value;
+    }
+
+    string IRef.UserType
+    {
+      get => Self?.UserType;
+      set => (Self ??= new Ref<T>()).UserType = value;
+    }
+
+    StringMap IRef.Args
+    {
+      get => Self?.Args;
+      set => (Self ??= new Ref<T>()).Args = value;
+    }
+
+    IEnumerable<IEntity> IEntity.Children() => Children();
+
+    protected abstract IEnumerable<IEntity> Children();
   }
-}
+}
\ No newline at end of file
diff --git a/Server/Keep.Paper/Design/Spec/GenericResponse.cs b/Server/Keep.Paper/Design/Spec/GenericResponse.cs
index 89794773..c6d2fa7b 100644
--- a/Server/Keep.Paper/Design/Spec/GenericResponse.cs
+++ b/Server/Keep.Paper/Design/Spec/GenericResponse.cs
@@ -4,27 +4,16 @@ using Newtonsoft.Json;
 
 namespace Keep.Paper.Design
 {
-  public class AbstractResponse<TData> : Response, IResponse, IDesign
-    where TData : IDesign
+  public class GenericResponse<TData> : Response, IResponse, IDesign
+    where TData : IEntity
   {
     private TData _data;
 
     [JsonProperty(Order = 200)]
-    public override IDesign Data
+    public override IEntity Data
     {
       get => _data;
       set => _data = (TData)value;
     }
   }
-
-  public class Response<TData> : AbstractResponse<TData>, IResponse, IDesign
-    where TData : IDesign
-  {
-    [JsonProperty(Order = 200)]
-    public new TData Data
-    {
-      get => (TData)base.Data;
-      set => base.Data = value;
-    }
-  }
 }
diff --git a/Server/Keep.Paper/Design/Spec/IEntity.cs b/Server/Keep.Paper/Design/Spec/IEntity.cs
index 631c6cff..9f186bd7 100644
--- a/Server/Keep.Paper/Design/Spec/IEntity.cs
+++ b/Server/Keep.Paper/Design/Spec/IEntity.cs
@@ -1,22 +1,15 @@
 ﻿using System;
+using System.Collections.Generic;
 using System.Linq;
 using Keep.Tools.Collections;
 using Newtonsoft.Json;
 
 namespace Keep.Paper.Design
 {
-  [JsonObject(
-    ItemNullValueHandling = NullValueHandling.Ignore,
-    ItemReferenceLoopHandling = ReferenceLoopHandling.Ignore)]
-  public class Entity : IDesign
+  public interface IEntity : IDesign
   {
-    [JsonProperty(Order = -20000)]
-    public Ref Self { get; set; }
+    IRef Self { get; set; }
 
-    [JsonProperty(Order = -10000)]
-    public Collection<string> Rel { get; set; }
-
-    [JsonProperty(Order = 100000)]
-    public Collection<Entity> Embedded { get; set; }
+    IEnumerable<IEntity> Children();
   }
 }
diff --git a/Server/Keep.Paper/Design/Spec/IRef.cs b/Server/Keep.Paper/Design/Spec/IRef.cs
index 80a8c3b0..9142339d 100644
--- a/Server/Keep.Paper/Design/Spec/IRef.cs
+++ b/Server/Keep.Paper/Design/Spec/IRef.cs
@@ -1,10 +1,14 @@
 ﻿using System;
+using System.Text.Json.Serialization;
+using Keep.Tools.Collections;
+
 namespace Keep.Paper.Design
 {
-  public class IRef
+  public interface IRef
   {
-    public IRef()
-    {
-    }
+    string BaseType { get; set; }
+    string UserType { get; set; }
+    StringMap Args { get; set; }
+    string ToString();
   }
 }
diff --git a/Server/Keep.Paper/Design/Spec/IRef`1.cs b/Server/Keep.Paper/Design/Spec/IRef`1.cs
index 80a8c3b0..dc7f81d4 100644
--- a/Server/Keep.Paper/Design/Spec/IRef`1.cs
+++ b/Server/Keep.Paper/Design/Spec/IRef`1.cs
@@ -1,10 +1,8 @@
 ﻿using System;
 namespace Keep.Paper.Design
 {
-  public class IRef
+  public interface IRef<T> : IRef
+    where T : IEntity
   {
-    public IRef()
-    {
-    }
   }
 }
diff --git a/Server/Keep.Paper/Design/Spec/Ref.cs b/Server/Keep.Paper/Design/Spec/Ref.cs
index ad3ef69a..1c7cee86 100644
--- a/Server/Keep.Paper/Design/Spec/Ref.cs
+++ b/Server/Keep.Paper/Design/Spec/Ref.cs
@@ -2,6 +2,7 @@
 using System.Collections.Generic;
 using System.Linq;
 using System.Reflection;
+using Keep.Paper.Design.Modeling;
 using Keep.Tools;
 using Keep.Tools.Collections;
 using Keep.Tools.Reflection;
@@ -10,69 +11,89 @@ using Newtonsoft.Json;
 namespace Keep.Paper.Design
 {
   [JsonConverter(typeof(RefConverter))]
-  public class Ref
+  public class Ref : IRef
   {
-    public static Ref Create(string type, string name)
+    public string BaseType { get; set; }
+
+    public string UserType { get; set; }
+
+    public StringMap Args { get; set; }
+
+    public override string ToString()
+    {
+      var type = string.IsNullOrWhiteSpace(BaseType) ? "*" : BaseType.Trim();
+      var subType = string.IsNullOrWhiteSpace(UserType) ? "" : $"/{UserType.Trim()}";
+      var keys = Args?.Select(arg => $"{arg.Key}={arg.Value}");
+      var args = keys?.Any() == true ? $"({string.Join(";", keys)})" : "";
+      return $"{type}{subType}{args}";
+    }
+
+    #region Conversões implícitas
+
+    public static implicit operator string(Ref @ref) => @ref?.ToString();
+
+    public static implicit operator Ref(string @ref) => Ref.Parse(@ref);
+
+    #endregion
+
+    #region Fábricas
+
+    public static Ref ForLocalReference(IEntity entity)
     {
+      var map = new StringMap();
+      map.Add("#Ref", Guid.NewGuid().ToString("B"));
       return new Ref
       {
-        Type = type,
-        Name = name,
-        Args = new StringMap()
+        BaseType = entity.GetType().Name,
+        Args = map
       };
     }
 
-    public static Ref Create(string type, string name, object args)
+    public static Ref<T> ForLocalReference<T>(T entity)
+      where T : class, IEntity
     {
-      var entries =
-        from entry in args._Map()
-        select KeyValuePair.Create(entry.Key, Change.To<string>(entry.Value));
-      return new Ref
+      var map = new StringMap();
+      map.Add("#Ref", Guid.NewGuid().ToString("B"));
+      return new Ref<T>
       {
-        Type = type,
-        Name = name,
-        Args = new StringMap(entries)
+        BaseType = entity.GetType().Name,
+        Args = map
       };
     }
 
-    public static Ref Create(string type, string name, StringMap args)
+    public static Ref For(string type, object args = null)
     {
+      var map = new StringMap();
+      if (args != null)
+      {
+        map.AddMany(
+          from entry in (args ?? new { })._Map()
+          select KeyValuePair.Create(entry.Key, Change.To<string>(entry.Value))
+        );
+      }
       return new Ref
       {
-        Type = type,
-        Name = name,
-        Args = args
+        BaseType = type,
+        Args = map
       };
     }
 
-    public static Ref Create(Type type, string methodName)
-    {
-      var method = type.GetMethod(methodName);
-      var name = $"{type.FullName}.{method.Name}";
-      return Ref.Create("Paper", name);
-    }
+    public static Ref<T> For<T>(string type, object args = null)
+      where T : class, IEntity
+      => For(type, args).CastTo<T>();
 
-    public static Ref Create(MethodInfo method)
+    public static Ref For(string type, StringMap args)
     {
-      var type = method.DeclaringType;
-      var name = $"{type.FullName}.{method.Name}";
-      return Ref.Create("Paper", name);
+      return new Ref
+      {
+        BaseType = type,
+        Args = args ?? new StringMap()
+      };
     }
 
-    public string Type { get; set; }
-
-    public string Name { get; set; }
-
-    public StringMap Args { get; set; }
-
-    public override string ToString()
-    {
-      var type = string.IsNullOrEmpty(Type) ? "" : $"{Type}/";
-      var name = string.IsNullOrEmpty(Name) ? "*" : Name;
-      var args = Args?.Select(arg => $"{arg.Key}={arg.Value}");
-      var keys = args?.Any() == true ? $"({string.Join(";", args)})" : "";
-      return $"{type}{name}{keys}";
-    }
+    public static Ref<T> For<T>(string type, StringMap args)
+      where T : class, IEntity
+      => For(type, args).CastTo<T>();
 
     public static Ref Parse(string path)
     {
@@ -85,8 +106,8 @@ namespace Keep.Paper.Design
         var argsPart = tokens.Skip(1).FirstOrDefault() ?? "";
 
         var parts = typePart.Split('/').NotNullOrEmpty().ToArray();
-        var type = parts.Length > 1 ? parts.First() : null;
-        var name = parts.Length > 1 ? string.Join("/", parts.Skip(1)) : typePart;
+        var type = parts.First();
+        var subType = parts.Length > 1 ? string.Join("/", parts.Skip(1)) : null;
 
         var args = new StringMap(
           from arg in argsPart.Split(';')
@@ -99,8 +120,8 @@ namespace Keep.Paper.Design
 
         return new Ref
         {
-          Type = type,
-          Name = name,
+          BaseType = type,
+          UserType = subType,
           Args = args
         };
       }
@@ -111,6 +132,10 @@ namespace Keep.Paper.Design
       }
     }
 
+    public static Ref<T> Parse<T>(string path)
+      where T : class, IEntity
+      => Parse(path).CastTo<T>();
+
     public static bool TryParse(string path, out Ref @ref)
     {
       try
@@ -125,7 +150,13 @@ namespace Keep.Paper.Design
       }
     }
 
-    public static implicit operator string(Ref @ref) => @ref?.ToString();
-    public static implicit operator Ref(string @ref) => Ref.Parse(@ref);
+    public static bool TryParse<T>(string path, out Ref<T> @ref)
+      where T : class, IEntity
+    {
+      var ok = TryParse(path, out Ref<T> @parsed);
+      @ref  = @parsed.CastTo<T>();
+      return ok;
+    }
+    #endregion
   }
 }
diff --git a/Server/Keep.Paper/Design/Spec/RefConverter.cs b/Server/Keep.Paper/Design/Spec/RefConverter.cs
index d1267d8d..b1c8cff3 100644
--- a/Server/Keep.Paper/Design/Spec/RefConverter.cs
+++ b/Server/Keep.Paper/Design/Spec/RefConverter.cs
@@ -7,20 +7,27 @@ namespace Keep.Paper.Design
   {
     public override bool CanConvert(Type objectType)
     {
-      return typeof(Ref).IsAssignableFrom(objectType);
+      return typeof(IRef).IsAssignableFrom(objectType);
     }
 
     public override object ReadJson(JsonReader reader, Type objectType,
       object existingValue, JsonSerializer serializer)
     {
       var value = (string)reader.Value;
-      return Ref.Parse(value);
+      IRef @ref = Ref.Parse(value);
+
+      if (!objectType.IsAssignableFrom(@ref.GetType()))
+      {
+        @ref = @ref.CastTo(objectType);
+      }
+
+      return @ref;
     }
 
     public override void WriteJson(JsonWriter writer, object value,
       JsonSerializer serializer)
     {
-      writer.WriteValue(((Ref)value).ToString());
+      writer.WriteValue(value.ToString());
     }
   }
 }
diff --git a/Server/Keep.Paper/Design/Spec/RefExtensions.cs b/Server/Keep.Paper/Design/Spec/RefExtensions.cs
index 6c859090..b7ab1328 100644
--- a/Server/Keep.Paper/Design/Spec/RefExtensions.cs
+++ b/Server/Keep.Paper/Design/Spec/RefExtensions.cs
@@ -10,134 +10,37 @@ using Newtonsoft.Json;
 
 namespace Keep.Paper.Design
 {
-  [JsonConverter(typeof(RefConverter))]
-  public class Ref : IRef
+  public static class RefExtensions
   {
-    public string Type { get; set; }
+    public static void CopyTo(this IRef source, IRef target)
+      => Copy(source, target);
 
-    public string SubType { get; set; }
+    public static IRef CastTo(this IRef source, Type targetRefType)
+      => Cast(source, targetRefType);
 
-    public StringMap Args { get; set; }
+    public static Ref<T> CastTo<T>(this IRef source)
+      where T : class, IEntity
+      => (Ref<T>)Cast(source, typeof(Ref<T>));
 
-    public static Ref For(string type, object args = null)
-    {
-      var map = new StringMap();
-      if (args != null)
-      {
-        map.AddMany(
-          from entry in (args ?? new { })._Map()
-          select KeyValuePair.Create(entry.Key, Change.To<string>(entry.Value))
-        );
-      }
-      return new Ref
-      {
-        Type = type,
-        Args = map
-      };
-    }
+    #region Implementação dos métodos
 
     public static void Copy(IRef source, IRef target)
     {
-      target.Type = source.Type;
-      target.SubType = source.SubType;
+      target.BaseType = source.BaseType;
+      target.UserType = source.UserType;
       target.Args = new StringMap(source.Args);
     }
 
-    public void CopyTo(IRef @ref)
-      => Copy(this, @ref);
-
-    public void CopyFrom(IRef @ref)
-      => Copy(@ref, this);
-
     public static IRef Cast(IRef @ref, Type targetRefType)
     {
+      if (targetRefType.IsAssignableFrom(@ref.GetType()))
+        return @ref;
+
       var targetRef = (IRef)Activator.CreateInstance(targetRefType);
       Copy(@ref, targetRef);
       return targetRef;
     }
 
-    public static IRef<T> Cast<T>(IRef @ref)
-      where T : class, IDesign
-      => (IRef<T>)Cast(@ref, typeof(IRef<T>));
-
-    public IRef CastTo(Type refType)
-      => Cast(this, refType);
-
-    public IRef<T> CastTo<T>()
-      where T : class, IDesign
-      => (IRef<T>)Cast(this, typeof(IRef<T>));
-
-    public static Ref For(string type, StringMap args)
-    {
-      return new Ref
-      {
-        Type = type,
-        Args = args ?? new StringMap()
-      };
-    }
-
-    public override string ToString()
-    {
-      var type = string.IsNullOrWhiteSpace(Type) ? "*" : Type.Trim();
-      var subType = string.IsNullOrWhiteSpace(SubType) ? "" : $"/{SubType.Trim()}";
-      var keys = Args?.Select(arg => $"{arg.Key}={arg.Value}");
-      var args = keys?.Any() == true ? $"({string.Join(";", keys)})" : "";
-      return $"{type}{subType}{args}";
-    }
-
-    public static Ref Parse(string path)
-    {
-      try
-      {
-        if (path == null) return null;
-
-        var tokens = path.Split('(', ')').NotNullOrEmpty();
-        var typePart = tokens.First();
-        var argsPart = tokens.Skip(1).FirstOrDefault() ?? "";
-
-        var parts = typePart.Split('/').NotNullOrEmpty().ToArray();
-        var type = parts.First();
-        var subType = parts.Length > 1 ? string.Join("/", parts.Skip(1)) : null;
-
-        var args = new StringMap(
-          from arg in argsPart.Split(';')
-          where !string.IsNullOrEmpty(arg)
-          let pair = arg.Split('=')
-          let key = pair.First().Trim()
-          let value = string.Join("=", pair.Skip(1).EmptyIfNull()).Trim()
-          select KeyValuePair.Create(key, value)
-        );
-
-        return new Ref
-        {
-          Type = type,
-          SubType = subType,
-          Args = args
-        };
-      }
-      catch (Exception ex)
-      {
-        throw new Exception(
-          $"O caminho é inválido para identificar uma ação: {path}", ex);
-      }
-    }
-
-    public static bool TryParse(string path, out Ref @ref)
-    {
-      try
-      {
-        @ref = Parse(path);
-        return true;
-      }
-      catch
-      {
-        @ref = null;
-        return false;
-      }
-    }
-
-    public static implicit operator string(Ref @ref) => @ref?.ToString();
-
-    public static implicit operator Ref(string @ref) => Ref.Parse(@ref);
+    #endregion
   }
 }
diff --git a/Server/Keep.Paper/Design/Spec/Ref`1.cs b/Server/Keep.Paper/Design/Spec/Ref`1.cs
index d2fde70c..f68e1ee6 100644
--- a/Server/Keep.Paper/Design/Spec/Ref`1.cs
+++ b/Server/Keep.Paper/Design/Spec/Ref`1.cs
@@ -11,110 +11,15 @@ using Newtonsoft.Json;
 namespace Keep.Paper.Design
 {
   [JsonConverter(typeof(RefConverter))]
-  public class Ref
+  public class Ref<T> : Ref, IRef<T>
+    where T : class, IEntity
   {
-    public string Type { get; set; }
-
-    public string SubType { get; set; }
-
-    public StringMap Args { get; set; }
-
-    public override string ToString()
-    {
-      var type = string.IsNullOrWhiteSpace(Type) ? "*" : Type.Trim();
-      var subType = string.IsNullOrWhiteSpace(SubType) ? "" : $"/{SubType.Trim()}";
-      var keys = Args?.Select(arg => $"{arg.Key}={arg.Value}");
-      var args = keys?.Any() == true ? $"({string.Join(";", keys)})" : "";
-      return $"{type}{subType}{args}";
-    }
-
     #region Conversões implícitas
 
-    public static implicit operator string(Ref @ref) => @ref?.ToString();
-
-    public static implicit operator Ref(string @ref) => Ref.Parse(@ref);
-
-    #endregion
-
-    #region Fábricas
-
-    public static Ref For(string type, object args = null)
-    {
-      var map = new StringMap();
-      if (args != null)
-      {
-        map.AddMany(
-          from entry in (args ?? new { })._Map()
-          select KeyValuePair.Create(entry.Key, Change.To<string>(entry.Value))
-        );
-      }
-      return new Ref
-      {
-        Type = type,
-        Args = map
-      };
-    }
-
-    public static Ref For(string type, StringMap args)
-    {
-      return new Ref
-      {
-        Type = type,
-        Args = args ?? new StringMap()
-      };
-    }
-
-    public static Ref Parse(string path)
-    {
-      try
-      {
-        if (path == null) return null;
-
-        var tokens = path.Split('(', ')').NotNullOrEmpty();
-        var typePart = tokens.First();
-        var argsPart = tokens.Skip(1).FirstOrDefault() ?? "";
-
-        var parts = typePart.Split('/').NotNullOrEmpty().ToArray();
-        var type = parts.First();
-        var subType = parts.Length > 1 ? string.Join("/", parts.Skip(1)) : null;
-
-        var args = new StringMap(
-          from arg in argsPart.Split(';')
-          where !string.IsNullOrEmpty(arg)
-          let pair = arg.Split('=')
-          let key = pair.First().Trim()
-          let value = string.Join("=", pair.Skip(1).EmptyIfNull()).Trim()
-          select KeyValuePair.Create(key, value)
-        );
-
-        return new Ref
-        {
-          Type = type,
-          SubType = subType,
-          Args = args
-        };
-      }
-      catch (Exception ex)
-      {
-        throw new Exception(
-          $"O caminho é inválido para identificar uma ação: {path}", ex);
-      }
-    }
+    public static implicit operator string(Ref<T> @ref) => @ref?.ToString();
 
-    public static bool TryParse(string path, out Ref @ref)
-    {
-      try
-      {
-        @ref = Parse(path);
-        return true;
-      }
-      catch
-      {
-        @ref = null;
-        return false;
-      }
-    }
+    public static implicit operator Ref<T>(string @ref) => Ref.Parse<T>(@ref);
 
     #endregion
   }
-}
+}
\ No newline at end of file
diff --git a/Server/Keep.Paper/Design/Spec/Response.cs b/Server/Keep.Paper/Design/Spec/Response.cs
index dfa4288e..a5f9ff8c 100644
--- a/Server/Keep.Paper/Design/Spec/Response.cs
+++ b/Server/Keep.Paper/Design/Spec/Response.cs
@@ -1,44 +1,100 @@
 ﻿using System;
+using System.Linq;
 using System.Net;
+using Keep.Paper.Design.Rendering;
 using Keep.Tools;
+using Keep.Tools.Collections;
 using Microsoft.AspNetCore.Http;
 using Newtonsoft.Json;
 
 namespace Keep.Paper.Design
 {
-  public class Status : Entity
+  public class Response : IResponse, IDesign
   {
+    private bool? _ok;
+
+    /// <summary>
+    /// Status de processamento baseado nos códigos de status HTTP.
+    /// -   Informational responses(100–199)
+    /// -   Successful responses(200–299)
+    /// -   Redirects(300–399)
+    /// -   Client errors(400–499)
+    /// -   Server errors(500–599)
+    /// </summary>
     [JsonProperty(Order = 100)]
-    public int Code { get; set; }
+    public bool? Ok
+    {
+      get
+      {
+        if (_ok != null) return _ok;
+        if (Code >= 100 && Code < 400) return true;
+        if (Code >= 400 && Code < 600) return false;
+        return true;
+      }
+      set => _ok = value;
+    }
 
     [JsonProperty(Order = 200)]
-    public string Message { get; set; }
+    public virtual IEntity Data { get; set; }
+
+    [JsonProperty(Order = 250)]
+    public virtual Collection<IEntity> Embedded { get; set; }
 
     [JsonProperty(Order = 300)]
-    public string Location { get; set; }
+    public int? Code { get; set; }
 
     [JsonProperty(Order = 400)]
-    public string Field { get; set; }
+    public string[] Messages { get; set; }
+
+    /// <summary>
+    /// URL destino em caso de status de redirecionamento, entre 300 e 399.
+    /// </summary>
+    [JsonProperty(Order = 500)]
+    public string Location { get; set; }
+
+    public static Response<T> For<T>(T design)
+      where T : IEntity
+      => new Response<T> { Data = design };
+
+    public static Response For(IEntity design)
+      => new Response { Data = design };
 
-    public static Status Create(int code, string message = null)
+    public static Response For(int code, params string[] messages)
     {
-      return new Status
+      return new Response
       {
-        Self = Ref.Create(null, nameof(Status), new { Code = code }),
         Code = code,
-        Message = message
-          ?? ((HttpStatusCode)code).ToString().ChangeCase(TextCase.ProperCase)
+        Messages = messages
       };
     }
 
-    public static Status Create(HttpStatusCode code, string message = null)
+    public static Response For(HttpStatusCode code, params string[] messages)
     {
-      return new Status
+      if (messages?.Any() != true)
+      {
+        messages = new[] { code.ToString().ChangeCase(TextCase.ProperCase) };
+      }
+      return new Response
+      {
+        Code = (int)code,
+        Messages = messages
+      };
+    }
+
+    public static Response For(Ret ret)
+    {
+      var code = ret.Status.Code;
+      var message = ret.Fault.Message;
+
+      var messages = !string.IsNullOrEmpty(message)
+        ? new[] { message }
+        : new[] { code.ToString().ChangeCase(TextCase.ProperCase) };
+
+      return new Response
       {
-        Self = Ref.Create(null, nameof(Status), new { Code = (int)code }),
         Code = (int)code,
-        Message = message
-          ?? code.ToString().ChangeCase(TextCase.ProperCase)
+        Data = ret.Value as IEntity,
+        Messages = messages
       };
     }
   }
diff --git a/Server/Keep.Paper/Design/Spec/Response`1.cs b/Server/Keep.Paper/Design/Spec/Response`1.cs
index 9abf7de7..fb4a03ba 100644
--- a/Server/Keep.Paper/Design/Spec/Response`1.cs
+++ b/Server/Keep.Paper/Design/Spec/Response`1.cs
@@ -1,10 +1,17 @@
 ﻿using System;
-namespace Keep.Paper.Design.Spec
+using Keep.Paper.Design.Rendering;
+using Newtonsoft.Json;
+
+namespace Keep.Paper.Design
 {
-  public class Response2
+  public class Response<TData> : GenericResponse<TData>, IResponse, IDesign
+    where TData : IEntity
   {
-    public Response2()
+    [JsonProperty(Order = 200)]
+    public new IEntity Data
     {
+      get => (TData)base.Data;
+      set => base.Data = (TData)value;
     }
   }
 }
diff --git a/Server/Keep.Paper/Keep.Paper.csproj b/Server/Keep.Paper/Keep.Paper.csproj
index 8b0ac9ff..432abbda 100644
--- a/Server/Keep.Paper/Keep.Paper.csproj
+++ b/Server/Keep.Paper/Keep.Paper.csproj
@@ -30,8 +30,8 @@
     <Folder Include="Design.Serialization\" />
     <Folder Include="Design.Rendering\" />
     <Folder Include="Design.Core\" />
-    <Folder Include="Papers\" />
     <Folder Include="Design.Modeling\" />
+    <Folder Include="Design\Spec\" />
   </ItemGroup>
   <ItemGroup>
     <Compile Remove="Design\ISerializable.cs" />
diff --git a/Server/Keep.Paper/Papers/LoginPaper.cs b/Server/Keep.Paper/Papers/LoginPaper.cs
deleted file mode 100644
index d9482b73..00000000
--- a/Server/Keep.Paper/Papers/LoginPaper.cs
+++ /dev/null
@@ -1,91 +0,0 @@
-﻿using System;
-using Keep.Paper.Design;
-using Keep.Paper.Design.Modeling;
-using Keep.Tools;
-using Keep.Tools.Collections;
-using Microsoft.AspNetCore.Http;
-using Newtonsoft.Json.Linq;
-
-namespace Keep.Paper.Papers
-{
-  [Expose]
-  public class LoginPaper : IPaper
-  {
-    public IDesign Login(Form form)
-    {
-      var jObject = form.Properties as JObject;
-      var username = jObject?["username"]?.ToString();
-      var password = jObject?["password"]?.ToString();
-      var redirect = jObject?["redirect"]?.ToString();
-      return new Design.Paper
-      {
-        Data = new Collection<Data>
-        {
-          new Data
-          {
-            Properties = new
-            {
-              Username = username,
-              Password = password,
-              Redirect = redirect,
-            }
-          }
-        },
-        View = new View
-        {
-          Target = Ref.Create(GetType(), nameof(Authenticate)),
-          Face = new PaperFace.Form(),
-          Fields = new Collection<Field>
-          {
-            new Field
-            {
-              Name = "Username",
-              Type = TypeNames.Text,
-              Face = new FieldFace.Input(),
-              Title = "Usuário"
-            },
-            new Field
-            {
-              Name = "Password",
-              Type = TypeNames.Text,
-              Face = new FieldFace.Input(),
-              Title = "Senha",
-              Password = true
-            }
-          }
-        }
-      };
-    }
-
-    public IDesign Authenticate(Form form)
-    {
-      var jObject = form.Properties as JObject;
-      var username = jObject?["username"]?.ToString();
-      var password = jObject?["password"]?.ToString();
-      var redirect = jObject?["redirect"]?.ToString();
-      if (username == "admin" && password == "admin")
-      {
-        return new Status
-        {
-          Code = StatusCodes.Status302Found,
-          Location = redirect ?? "Home",
-        };
-      }
-      else
-      {
-        return new Validation
-        {
-          Status = new Collection<Status>
-          {
-            new Status
-            {
-              Code = StatusCodes.Status401Unauthorized,
-              Message = "Usuário e senha não conferem.",
-              Field = "Username"
-            }
-          }
-        };
-      }
-    }
-  }
-}
\ No newline at end of file
diff --git a/Server/Sandbox/Program.cs b/Server/Sandbox/Program.cs
index 8007e2d8..e28de0a9 100644
--- a/Server/Sandbox/Program.cs
+++ b/Server/Sandbox/Program.cs
@@ -27,7 +27,7 @@ namespace Mercadologic.Replicacao
     public string Language { get; set; }
   }
 
-  public class LocalResponse : IResponse, IDisposable
+  public class LocalResponse : IOutput, IDisposable
   {
     private readonly MemoryStream memory;
 
@@ -38,7 +38,7 @@ namespace Mercadologic.Replicacao
 
     public AcceptedFormats AcceptedFormats { get; } = new AcceptedFormats();
 
-    public IFormat Format { get; } = new LocalFormat();
+    public IFormat BodyFormat { get; } = new LocalFormat();
 
     public Stream Body => memory;
 
@@ -60,7 +60,7 @@ namespace Mercadologic.Replicacao
     {
       var source = new Data
       {
-        Self = Ref.Create("Demo", "Sandbox", new { Id = 10 }),
+        Self = Ref.For<Data>("Demo.Sandbox", new { Id = 10 }),
         Properties = new
         {
           Id = 10,
